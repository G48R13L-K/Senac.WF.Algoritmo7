<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAAgDQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAlw
        SFlzAAALEwAACxMBAJqcGAAADNJJREFUeJzt3XusHWXVx/EftAWBKmAFIRZKC0agSojGRFFCVChRqBEU
        EhQIrQEqEGtKFIUYkYsgd8FbMBAxBhWjYFAQRAGhrRRRiRACiFwF5X4Lciu6FrOLgOdwzp49M+t55vl+
        k89fry+dvWbPPrNnz0UiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqImm2JmmfeZj5mDzZHm
        u+Y8c4lZbm4wd5mHX2al+c/Aylf93+4a/P8sH/w3/L/1ncF/+6DBv7Xd4N+e0vJrJCq+TczO5lBVG6Jv
        lLeaZ/S/jTiKL8Mtg2XyZVti5pmZrUyCqMf5X9O3mwXmW6r+Aj+q+I28Ll/2ZeabZj8zV+wxEL3UdFV/
        LY8xV5onFL/Rts1f4xXmaLOTWWfUIRLl0lSzgzne/ME8p/gNMprPwPd0jhvMZmrt6RIl2IZmofmp8t6d
        78qjg1ktHMyOKLs2MPuaC8Vf+VH4rxNXm8XmLUOtAaKOW98sMkvNC4rfePpm1YfBgWa9Sa4Tolbz76u7
        qtplfVrxG0kp/m1+YnYRvypQQBuZw8wdit8YSnevqoOqm7zWCiNqoh1U/bV/VvFvfLySrxPfK9h+3LVH
        VKPVzXxVJ7REv8kxOdepOgjLT4pUuzVUHdT7m+Lf0KjHT5c+YLAuiSbVNFV/PW5T/BsYzbhT1U+Ja4po
        nHx3cX9xYK/Pbld1ghG/HNAr2tFcr/g3KLpxk9lDVHzbmssU/4ZEjEvNNqLi8jPJvmGeV/ybELH8DMMf
        mBmiIvJdv38q/o2HtNyn6uDvaqJetrm5XPFvNKTtt2aOqDf5J7r/FlzCzTbQjKdUnertJ4FRxm1hrlL8
        Gwp5+r2qPUfKMP8+x199jOpxVXuQlEl+hP/Hin/jpMzvV7DCnG3OEudATMa5Zl1R0r1bnMk3Eb+acasx
        ZvdeVR8K0cuXsr+bd40xO0ogP42Xm3KMz2+isdcEM/SDXp8Z/G+jlzdVPpuFE8yROux1qnZjo98YKfOH
        d3xoiJl+QNWR8OjlTtmZ4uKi8PzOPH577eg3Q+oOqTHbRQksd+r8HhHcuTiod4jv+5Phz/irc/Wbnz/B
        wcGJ+XGBuTXmSyP0YVU/z0Sv/Bwsrjlj76sJLH8O/FkG82rOmIbMf9/nXvuTt3W9Mb/YHgksfy78noSf
        rDdmmmz+14x77g9neq1JV22TwPLnxK8srHO8hSbRUYpfwTlaq86wB22cwPLn6Ct1hk3j5/d9j16pudqy
        xrxXtXUCy5+rY2vMm8aIjX80i4Yf+UsdnMDy5+yY4UdOL88fGR29EnP3Z9W7rJWfAZtx9LCDp6rDFb/y
        +uLAIWfvcSJQc74w5OyLz8/r52h/c5407xxi/n7aMNdVNMffywuGmH/R7S5u1tmGB1U94uy18t1+/8vP
        xt88P3floxPMv/jeo26uRHv19fB/6eDfTMW1qs7w85N8/HRq/6nPT2X1A36lfOePWv9+gZVfsk5jtKm6
        uVvvzzT29fD+4XNNB/8+YkWvf3+c+cwx/v2i87PV2v7r47u1n5pgOfxouR8we7LlZUH3Ulr//vTidSZY
        lmLy753nq92B+3naOw6xTH7A7MGWlwndSXH9nyeeQfBin1f7b4DP1liu+R0sF7qR6vr/XI3l6lXvV/tX
        9t2o+k+DvbblZUP7Ul7/vmeyXc1lyz6/k8o/1P4bYJRPWa6Hz1/q6/9us8EIy5htv1A3bwCuhy9bDuv/
        /BGWMcv8QQtdvQG4Hr5suaz/Yu40/FZ1+8QerocvWy7r329x1/uHkvrvrFer2zfA20ZY3rkdLyvKXv9X
        qOc/DUZcYVbnSrhVcT18/nJb/58eYXmTznen/O6pXQ/0T+J6+JLltv4fNm+usbzJ52c+Rb0JuB6+bLmt
        /3NrLG/S+aOmIt8AXA9fthzX//ZDLG/S+VlYKVxuy/XwZctt/f9R9b66JJff3Sd6mC/H9fBly2n976fM
        80seu7jGH+gjP1V+lPMYwvui4ocI5GyJMs1Pwbxf8QMEcvaAeb0y7AjFDw/og8OUWWuLO+oATfE96ayO
        BXAKLdAsv4I2i/y3y1sVPzCgT25WJucF7Kb4YQF9tKsy6DLFDwroo4uUeLPNSsUPCugj37ZmKeH8eejR
        QwL67Eglml/0c4/iBwT02V2qf5vzVttJ8cMBSuCX1yfXmYofDFCCbyuxporz/oGu+Lbm21wyzVP8UICS
        fFAJdbriBwKU5GQllJ+mGD0QoCT+0NMk2kzxwwBKNEsJ5Ldcjh4EUKIkrhA8R/GDAEp0thIohVt+AyW6
        Tgnk9yyLHgRQovuUQCk8RAEo0VNKoCcUPwigRP4g0fD86qToQQAluk0JxB2AgBhJ3CHoBMUPAiiR34An
        vB0VPwigRDsogfyyRH+IYfQwgJLcq4QuCT5a8QMBSnKkEmo985DihwKUwH/+e6MSi8eBAd3wC/CSazVz
        seKHA/TZhaq2tSR7g7le8UMC+uh3ZroSb6a5QfHDAvrkArOmMml9VWcpRQ8N6IPvmWnKLP+e4gcG/Yhl
        9ACBHPml9vsq82aoOmXRr12OHiiQA99WfJvxPene5Lswfi/z482lqq4ifFzxwwYi+Tbg24JvE75t+DaS
        3e4+EREREREREREREREREREREREREREREREREREREREREeXXhmZPc6qqW4ffoupWYc8q/oYMQCTfBnxb
        8G3Ct41TzCfMBso8f1rQQWapeUHxgwZy4tvMVaoeArKuMmojc6K43RfQlMfMcar2pJPNn1S6WNXCRg8M
        6KNHVW1jyTwVeFVzzArFDwgowXIzS4m0i6pPpuihACXxA4c7K7h9xJF8IMpzZqGCWiCO7gPRfBvcWx03
        X9WnT/SLB1DthXf2dWBz8Z0fSM0jZrZazh9ZdG3wCwUwtmVmilrs0AReJIDxHaKW2lic3Qekzr8KtHId
        wUkJvDgAE/uaGs6fU85ffyAPfpC+0QuIDkrgRQGYvAPUYMsSeEEAJu9KNZRfgsgZf0BefJt9kxpozwRe
        DIDh7a4GOjWBFwJgeCergS5O4IUAGN4v1UC3JvBCAAzPbzQ6cg8l8EIADO8BNdAzCbwQAMN7Wg3EBwCQ
        p0Y+APgKAOSpka8AHAQE8nSzGoifAYE8NfIzICcCAXlq5ESgPRJ4IQCGt5saiIuBgPysNDPUUEsTeEEA
        Ju8KNRg3BAHysr8ajFuCAflo/JZg3okJvDAAEztGLbSReSyBFwdgfP7U4EbuBDRWSxJ4gQDGd7BabKpZ
        kcCLBPD//Ne6Vh8N5s0RDwcFUuO7/pupo3YRjwcHUuGPB5+njlsgzhAEovk2uLeC2kfVp0/0EIAS+V74
        QgX3EVVPJI0eBlASv1FP57v94zXbXKP4oQAl8KP9myqx/CfCxeIXAqAtvqft21jrP/WNkl8+/HVx1iDQ
        FP+jeqxaPMOvjdYzi8xV4tcCYFh+Pb8/4dev6mv8wp6u80+uj6u6RdFF5iZVBzG45ThK59uAbwu+TfzK
        nKTqoZ6N3cyDiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiGiuOdXcYJ5U/A0XgJz5NuTb0ilm
        KyXcGuYM87zihwb0kW9bp5lpSizf+H+j+AEBJbhEiX0InK74oQAl8T2BJNpa7PYDXfPHgm2pBPJPouhh
        ACXyu2yHd6PiBwGU6K9KoCcUPwigRL7thRc9BKBk4UUPAChZeNEDAEoWXvQAgJKFFz0AoGThRQ8AKFl4
        0QMAShZe9ACAkoX3jOKHAJToaSXQQ4ofBFCi+5VAdyh+EECJblMCLVf8IIASXa0E+r7iBwGU6Cwl0JcU
        PwigRIcpgXZW/CCAEs1TAk03zyp+GEBJfJtbR4m0TPEDAUqSxAHAVR2h+IEAJfFjb8k0y7yg+KEAJfBt
        bbYSi68BQDeWKsH2U/xggBIsUIL5o4ruVPxwgD67R9Wj+JJsieIHBPTZoUq4tcztih8S0Ed3K6Hf/sdr
        T8UPCugj37ay6DLFDwvok8vNasqkmeZBxQ8N6INHzGbKrN0VPzigD/ZSpp2k+OEBOTtNGeffWc5R/BCB
        HF1gpijz/KSFXyt+mEBO/ED6mupJ/iHwI8UPFcjBz1WdU9OrVlf1fSZ6uEDKfBvxbaW3+a8D/rNG9KCB
        lDymjI/2D9sW4vJhYJXLVd1To6j8F4J9zb8UvwKACH5ln28D2Zzh10brm6PEI8ZQDt/w/aq+tUUv5XcX
        9suJb1T8CgKa5rfx8q+9fjOPZK/nT6VtzQnmerNS8SsPqMNv3e137z1cCd7DL5dmmN3Ml80PzQpVD0V8
        WDyaHPH8PegXvvl70jd2f1yXP7HHH9qR/LX7RERERERERERERERERERERERERERERERERERERERERJRe
        /wXTv9KD7hjVGAAAAABJRU5ErkJggg==
</value>
  </data>
</root>